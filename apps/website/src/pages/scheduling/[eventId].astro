---
import RosterManagement from '../../components/scheduling/RosterManagement.js';
import Layout from '../../layouts/Layout.astro';
import { getEvent, getEvents } from '../../lib/schedulingApi.js';

// Generate static paths for all existing events
export async function getStaticPaths() {
  const events = await getEvents();
  
  return events.map((event) => ({
    params: { eventId: event.id },
    props: { event },
  }));
}

// Get the event from props (pre-fetched in getStaticPaths)
const { event } = Astro.props;

function formatDate(date: Date): string {
  return new Intl.DateTimeFormat('en-US', {
    weekday: 'long',
    month: 'long',
    day: 'numeric',
    hour: 'numeric',
    minute: '2-digit',
    timeZoneName: 'short'
  }).format(date);
}

function getStatusColor(status: string): string {
  switch (status) {
    case 'draft': return 'bg-yellow-100 text-yellow-800';
    case 'published': return 'bg-blue-100 text-blue-800';
    case 'in-progress': return 'bg-green-100 text-green-800';
    case 'completed': return 'bg-gray-100 text-gray-800';
    case 'cancelled': return 'bg-red-100 text-red-800';
    default: return 'bg-gray-100 text-gray-800';
  }
}
---

<Layout title={`${event.name} - Roster Management`}>
  <div class="min-h-screen grid grid-cols-[1fr_min(1200px,100%)_1fr] px-4 py-8">
    <div class="col-start-2">
      <!-- Header -->
      <div class="mb-8">
        <div class="flex items-center gap-4 mb-4">
          <a 
            href="/scheduling"
            class="text-blue-600 hover:text-blue-700 flex items-center gap-2"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Back to Events
          </a>
          <span class={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(event.status)}`}>
            {event.status}
          </span>
        </div>
        
        <h1 class="text-3xl font-bold text-gray-900">{event.name}</h1>
        <p class="text-gray-600 mt-2">Roster management for {event.encounter}</p>
      </div>

      <!-- Event Details Card -->
      <div class="bg-white rounded-lg border border-gray-200 p-6 mb-8">
        <h2 class="text-xl font-semibold text-gray-900 mb-4">Event Details</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div>
            <h3 class="text-sm font-medium text-gray-500 mb-1">Encounter</h3>
            <p class="text-lg font-semibold text-gray-900">{event.encounter}</p>
          </div>
          
          <div>
            <h3 class="text-sm font-medium text-gray-500 mb-1">Scheduled Time</h3>
            <p class="text-lg font-semibold text-gray-900">{formatDate(event.scheduledTime)}</p>
          </div>
          
          <div>
            <h3 class="text-sm font-medium text-gray-500 mb-1">Duration</h3>
            <p class="text-lg font-semibold text-gray-900">{event.duration} minutes</p>
          </div>
          
          <div>
            <h3 class="text-sm font-medium text-gray-500 mb-1">Team Leader</h3>
            <p class="text-lg font-semibold text-gray-900">{event.teamLeaderName}</p>
          </div>
          
          <div>
            <h3 class="text-sm font-medium text-gray-500 mb-1">Roster Progress</h3>
            <p class="text-lg font-semibold text-gray-900">
              {event.roster.filledSlots}/{event.roster.totalSlots} slots filled
            </p>
          </div>
          
          <div>
            <h3 class="text-sm font-medium text-gray-500 mb-1">Party</h3>
            <p class="text-lg font-semibold text-gray-900">8 slots</p>
          </div>
        </div>
      </div>

      <!-- Interactive Roster Management -->
      <RosterManagement 
        client:load
        event={event}
        teamLeaderId={event.teamLeaderId}
      />
    </div>
  </div>
</Layout> 
